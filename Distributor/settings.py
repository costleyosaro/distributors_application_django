"""
Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from pathlib import Path
import os
import dj_database_url

from environ import Env

# Move two levels up to reach the correct .env filej
BASE_DIR = Path(__file__).resolve().parent.parent  

# Initialize environ
env = Env()
env.read_env(BASE_DIR / "Distributor" / ".env")  # âœ… Correct

# Now use environment variables
SECRET_KEY = env("SECRET_KEY")
DEBUG = env.bool("DEBUG", default=False)
 # ðŸ‘ˆ points to the correct .env file

# Now you can use env('VAR_NAME')
 # Correct path if .env is in Distributor_app/

# 4. Load environment-specific variables
ENVIRONMENT = env('ENVIRONMENT', default="Production")


STATIC_URL = '/static/'  # This is required
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]


STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media settings

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Optional: Create media folder if not exists (still fine)
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)





import cloudinary
import cloudinary.uploader
import cloudinary.api

# âœ… Set Cloudinary config directly
cloudinary.config( 
  cloud_name = env("CLOUD_NAME"), 
  api_key = env("CLOUD_API_KEY"), 
  api_secret = env("CLOUD_API_SECRET"),
  secure = True
)

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': env("CLOUD_NAME"),
    'CLOUD_API_KEY': env("CLOUD_API_KEY"),
    'CLOUD_API_SECRET': env("CLOUD_API_SECRET"),
}



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
if ENVIRONMENT=='development':
    DEBUG=True
else:
    DEBUG=False    

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "distributors-application-django.onrender.com",
    # Add your Ngrok URL here
]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary',
    'cloudinary_storage',
    'dashboard',
    'users',
    'clearcache',
    'rest_framework',
    'channels',
    'django.contrib.humanize',
    'admin_honeypot',

]

MIDDLEWARE = [
    'dashboard.middleware.MediaMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

from django.contrib.messages import constants as message_constants
MESSAGE_TAGS = {
    message_constants.SUCCESS: 'success',
    message_constants.ERROR: 'danger',
}
# settings.py

CSRF_COOKIE_HTTPONLY = False  # Ensure CSRF cookie is readable by JavaScript
CSRF_COOKIE_SAMESITE = 'Lax'  # Allow CSRF token to work on your pages

ROOT_URLCONF = 'Distributor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Distributor.wsgi.application'
# Channels Configuration
ASGI_APPLICATION = "Distributor.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",  # Use Redis for production
    },
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
POSTGRESS_LOCALLY=True
if ENVIRONMENT=='production' or POSTGRESS_LOCALLY==True:
    DATABASES['default']= dj_database_url.parse(env('DATABASE_URL'))

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Default backend: uses database for sessions
SESSION_COOKIE_AGE = 3600  # 1 hour session timeout (you can adjust this)
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Optionally expire session when the browser is closed


STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
USE_TZ = True
TIME_ZONE = "Africa/Lagos"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.CustomUser'


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/










# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env("EMAIL_HOST_USER")  # Your email address
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")  # Your email password
DEFAULT_FROM_EMAIL = 'distributorapplicationphc@gmail.com'  # Default sender email address
import logging
logging.basicConfig(level=logging.DEBUG)

USERNAME_BLACKLIST = [
    "admin",
    "theboss",
    "root",
    "staff",
    "support",
    "administrator"
]
 
# Flutterwave API Keys
FLW_PUBLIC_KEY = env("FLW_PUBLIC_KEY")
FLW_SECRET_KEY = env("FLW_SECRET_KEY")
FLW_ENCRYPTION_KEY = env("FLW_ENCRYPTION_KEY")

# Flutterwave base URL
FLW_BASE_URL = 'https://api.flutterwave.com/v3/'

